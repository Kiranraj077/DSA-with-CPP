/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */

class Solution {
public:
    ListNode *addTwoNumbers(ListNode* l1, ListNode* l2) {
        // Create a dummy node to simplify handling the result list
        ListNode* dummy = new ListNode();
        ListNode* temp = dummy;  // Pointer to build the result list
        int c = 0;               // Carry from previous sum
        int sum = 0;             // Sum of current digits + carry
        
        // Loop until both lists are exhausted and carry is 0
        while (l1 != NULL || l2 != NULL || c != 0) {
            sum = 0; // Reset sum for this digit
            
            // Add l1's digit if available
            if (l1 != NULL) {
                sum += l1->val;
                l1 = l1->next;
            }
            
            // Add l2's digit if available
            if (l2 != NULL) {
                sum += l2->val;
                l2 = l2->next;
            }
            
            // Add carry from previous addition
            sum += c;
            
            // Compute digit value and new carry
            int v = sum % 10;   // Current digit to store
            c = sum / 10;       // Carry for next digit
            
            // Create a new node with digit value and link it
            ListNode *mover = new ListNode(v);
            temp->next = mover;
            temp = temp->next;  // Move temp pointer forward
        }
        
        // Return head of the resulting list (skipping dummy)
        return dummy->next;
    }
};
